# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Provider {
  id: ID!
  contactName: String!
  email: String!
  phone: String!
  direction: String!
  createdBy: String!
  createdById: String!
  updatedBy: String!
  updatedById: String!
  createAt: DateTime!
  updateAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Float!
  image: String
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  providersAggregate(
    """Filter to find records to aggregate on"""
    filter: ProviderAggregateFilter
  ): [ProductProvidersAggregateResponse!]!
  order: Order
  providers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProviderFilter = {}

    """Specify to sort results."""
    sorting: [ProviderSort!] = []
  ): ProductProvidersConnection
}

input ProviderAggregateFilter {
  and: [ProviderAggregateFilter!]
  or: [ProviderAggregateFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input ProviderFilter {
  and: [ProviderFilter!]
  or: [ProviderFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
}

input ProviderSort {
  field: ProviderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProviderSortFields {
  id
  contactName
  email
  phone
  direction
  createdBy
  createdById
  updatedBy
  updatedById
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Order {
  id: ID!
  date: DateTime!
  quantity: Float
  customerId: String
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  productsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [OrderProductsAggregateResponse!]!
  customer: Customer
  products(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): OrderProductsConnection
}

input ProductAggregateFilter {
  and: [ProductAggregateFilter!]
  or: [ProductAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input ProductFilter {
  and: [ProductFilter!]
  or: [ProductFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
  order: ProductFilterOrderFilter
  provider: ProductFilterProviderFilter
}

input ProductFilterOrderFilter {
  and: [ProductFilterOrderFilter!]
  or: [ProductFilterOrderFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  quantity: NumberFieldComparison
  customerId: StringFieldComparison
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input ProductFilterProviderFilter {
  and: [ProductFilterProviderFilter!]
  or: [ProductFilterProviderFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
}

input ProductSort {
  field: ProductSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductSortFields {
  id
  name
  description
  price
  stock
  image
}

type Customer {
  id: ID!
  name: String!
  lastname: String!
  phone: String!
  direction: String!
  image: String
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  ordersAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [CustomerOrdersAggregateResponse!]!
  orders(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): CustomerOrdersConnection
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  quantity: NumberFieldComparison
  customerId: StringFieldComparison
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  quantity: NumberFieldComparison
  customerId: StringFieldComparison
  customer: OrderFilterCustomerFilter
  products: OrderFilterProductFilter
}

input OrderFilterCustomerFilter {
  and: [OrderFilterCustomerFilter!]
  or: [OrderFilterCustomerFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  image: StringFieldComparison
}

input OrderFilterProductFilter {
  and: [OrderFilterProductFilter!]
  or: [OrderFilterProductFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  id
  date
  quantity
  customerId
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type CustomerDeleteResponse {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  image: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type CustomerConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Customer!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CustomerAggregateGroupBy {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  image: String
}

type CustomerCountAggregate {
  id: Int
  name: Int
  lastname: Int
  phone: Int
  direction: Int
  image: Int
}

type CustomerMinAggregate {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  image: String
}

type CustomerMaxAggregate {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  image: String
}

type CustomerAggregateResponse {
  groupBy: CustomerAggregateGroupBy
  count: CustomerCountAggregate
  min: CustomerMinAggregate
  max: CustomerMaxAggregate
}

type CustomerOrdersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Order!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CustomerOrdersAggregateGroupBy {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
}

type CustomerOrdersCountAggregate {
  id: Int
  date: Int
  quantity: Int
  customerId: Int
}

type CustomerOrdersSumAggregate {
  quantity: Float
}

type CustomerOrdersAvgAggregate {
  quantity: Float
}

type CustomerOrdersMinAggregate {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
}

type CustomerOrdersMaxAggregate {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
}

type CustomerOrdersAggregateResponse {
  groupBy: CustomerOrdersAggregateGroupBy
  count: CustomerOrdersCountAggregate
  sum: CustomerOrdersSumAggregate
  avg: CustomerOrdersAvgAggregate
  min: CustomerOrdersMinAggregate
  max: CustomerOrdersMaxAggregate
}

type OrderDeleteResponse {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type OrderConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Order!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderAggregateGroupBy {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
}

type OrderCountAggregate {
  id: Int
  date: Int
  quantity: Int
  customerId: Int
}

type OrderSumAggregate {
  quantity: Float
}

type OrderAvgAggregate {
  quantity: Float
}

type OrderMinAggregate {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
}

type OrderMaxAggregate {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  sum: OrderSumAggregate
  avg: OrderAvgAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type OrderProductsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderProductsAggregateGroupBy {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
}

type OrderProductsCountAggregate {
  id: Int
  name: Int
  description: Int
  price: Int
  stock: Int
  image: Int
}

type OrderProductsSumAggregate {
  price: Float
  stock: Float
}

type OrderProductsAvgAggregate {
  price: Float
  stock: Float
}

type OrderProductsMinAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
}

type OrderProductsMaxAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
}

type OrderProductsAggregateResponse {
  groupBy: OrderProductsAggregateGroupBy
  count: OrderProductsCountAggregate
  sum: OrderProductsSumAggregate
  avg: OrderProductsAvgAggregate
  min: OrderProductsMinAggregate
  max: OrderProductsMaxAggregate
}

type ProductDeleteResponse {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type ProductConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductAggregateGroupBy {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
}

type ProductCountAggregate {
  id: Int
  name: Int
  description: Int
  price: Int
  stock: Int
  image: Int
}

type ProductSumAggregate {
  price: Float
  stock: Float
}

type ProductAvgAggregate {
  price: Float
  stock: Float
}

type ProductMinAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
}

type ProductMaxAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
}

type ProductAggregateResponse {
  groupBy: ProductAggregateGroupBy
  count: ProductCountAggregate
  sum: ProductSumAggregate
  avg: ProductAvgAggregate
  min: ProductMinAggregate
  max: ProductMaxAggregate
}

type ProductProvidersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Provider!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductProvidersAggregateGroupBy {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
}

type ProductProvidersCountAggregate {
  id: Int
  contactName: Int
  email: Int
  phone: Int
  direction: Int
  createdBy: Int
  createdById: Int
  updatedBy: Int
  updatedById: Int
}

type ProductProvidersMinAggregate {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
}

type ProductProvidersMaxAggregate {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
}

type ProductProvidersAggregateResponse {
  groupBy: ProductProvidersAggregateGroupBy
  count: ProductProvidersCountAggregate
  min: ProductProvidersMinAggregate
  max: ProductProvidersMaxAggregate
}

type User {
  id: ID!
  email: String!
  password: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
}

type UserDeleteResponse {
  id: ID
  email: String
  password: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type UserConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [User!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserAggregateGroupBy {
  id: ID
  email: String
  password: String
}

type UserCountAggregate {
  id: Int
  email: Int
  password: Int
}

type UserMinAggregate {
  id: ID
  email: String
  password: String
}

type UserMaxAggregate {
  id: ID
  email: String
  password: String
}

type UserAggregateResponse {
  groupBy: UserAggregateGroupBy
  count: UserCountAggregate
  min: UserMinAggregate
  max: UserMaxAggregate
}

type ProviderDeleteResponse {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  createAt: DateTime
  updateAt: DateTime
}

type ProviderConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Provider!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProviderAggregateGroupBy {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
}

type ProviderCountAggregate {
  id: Int
  contactName: Int
  email: Int
  phone: Int
  direction: Int
  createdBy: Int
  createdById: Int
  updatedBy: Int
  updatedById: Int
}

type ProviderMinAggregate {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
}

type ProviderMaxAggregate {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
}

type ProviderAggregateResponse {
  groupBy: ProviderAggregateGroupBy
  count: ProviderCountAggregate
  min: ProviderMinAggregate
  max: ProviderMaxAggregate
}

type LoginResponse {
  accessToken: String!
}

type Query {
  productAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductAggregateResponse!]!
  product(
    """The id of the record to find."""
    id: ID!
  ): Product
  products(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  customerAggregate(
    """Filter to find records to aggregate on"""
    filter: CustomerAggregateFilter
  ): [CustomerAggregateResponse!]!
  customer(
    """The id of the record to find."""
    id: ID!
  ): Customer
  customers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CustomerFilter = {}

    """Specify to sort results."""
    sorting: [CustomerSort!] = []
  ): CustomerConnection!
  userAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserAggregateResponse!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
  providerAggregate(
    """Filter to find records to aggregate on"""
    filter: ProviderAggregateFilter
  ): [ProviderAggregateResponse!]!
  provider(
    """The id of the record to find."""
    id: ID!
  ): Provider
  providers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProviderFilter = {}

    """Specify to sort results."""
    sorting: [ProviderSort!] = []
  ): ProviderConnection!
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order
  orders(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): OrderConnection!
}

input CustomerAggregateFilter {
  and: [CustomerAggregateFilter!]
  or: [CustomerAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  image: StringFieldComparison
}

input CustomerFilter {
  and: [CustomerFilter!]
  or: [CustomerFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  image: StringFieldComparison
  orders: CustomerFilterOrderFilter
}

input CustomerFilterOrderFilter {
  and: [CustomerFilterOrderFilter!]
  or: [CustomerFilterOrderFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  quantity: NumberFieldComparison
  customerId: StringFieldComparison
}

input CustomerSort {
  field: CustomerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CustomerSortFields {
  id
  name
  lastname
  phone
  direction
  image
}

input UserAggregateFilter {
  and: [UserAggregateFilter!]
  or: [UserAggregateFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  email
  password
}

type Mutation {
  restoreOneProduct(input: ID!): Product!
  restoreManyProduct(input: ProductFilter!): UpdateManyResponse!
  setOrderOnProduct(input: SetOrderOnProductInput!): Product!
  addProvidersToProduct(input: AddProvidersToProductInput!): Product!
  setProvidersOnProduct(input: SetProvidersOnProductInput!): Product!
  removeOrderFromProduct(input: RemoveOrderFromProductInput!): Product!
  removeProvidersFromProduct(input: RemoveProvidersFromProductInput!): Product!
  createOneProduct(input: CreateOneProductInput!): Product!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  deleteOneProduct(input: DeleteOneProductInput!): ProductDeleteResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  restoreOneCustomer(input: ID!): Customer!
  restoreManyCustomers(input: CustomerFilter!): UpdateManyResponse!
  addOrdersToCustomer(input: AddOrdersToCustomerInput!): Customer!
  setOrdersOnCustomer(input: SetOrdersOnCustomerInput!): Customer!
  removeOrdersFromCustomer(input: RemoveOrdersFromCustomerInput!): Customer!
  createOneCustomer(input: CreateOneCustomerInput!): Customer!
  createManyCustomers(input: CreateManyCustomersInput!): [Customer!]!
  updateOneCustomer(input: UpdateOneCustomerInput!): Customer!
  updateManyCustomers(input: UpdateManyCustomersInput!): UpdateManyResponse!
  deleteOneCustomer(input: DeleteOneCustomerInput!): CustomerDeleteResponse!
  deleteManyCustomers(input: DeleteManyCustomersInput!): DeleteManyResponse!
  restoreOneProvider(input: ID!): Provider!
  restoreManyProviders(input: OrderFilter!): UpdateManyResponse!
  restoreOneUser(input: ID!): User!
  restoreManyUsers(input: UserFilter!): UpdateManyResponse!
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  createOneProvider(input: CreateOneProviderInput!): Provider!
  createManyProviders(input: CreateManyProvidersInput!): [Provider!]!
  updateOneProvider(input: UpdateOneProviderInput!): Provider!
  updateManyProviders(input: UpdateManyProvidersInput!): UpdateManyResponse!
  deleteOneProvider(input: DeleteOneProviderInput!): ProviderDeleteResponse!
  deleteManyProviders(input: DeleteManyProvidersInput!): DeleteManyResponse!
  restoreOneOrder(input: ID!): Order!
  setCustomerOnOrder(input: SetCustomerOnOrderInput!): Order!
  addProductsToOrder(input: AddProductsToOrderInput!): Order!
  setProductsOnOrder(input: SetProductsOnOrderInput!): Order!
  removeCustomerFromOrder(input: RemoveCustomerFromOrderInput!): Order!
  removeProductsFromOrder(input: RemoveProductsFromOrderInput!): Order!
  createOneOrder(input: CreateOneOrderInput!): Order!
  createManyOrders(input: CreateManyOrdersInput!): [Order!]!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  deleteOneOrder(input: DeleteOneOrderInput!): OrderDeleteResponse!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
  login(input: LoginInputDTO!): LoginResponse!
}

input SetOrderOnProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddProvidersToProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProvidersOnProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveOrderFromProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveProvidersFromProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProductInput {
  """The record to create"""
  product: ProductInput!
}

input ProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Float!
  image: String
  orderId: String
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [ProductInput!]!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProduct!
}

input UpdateProduct {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProduct!
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  or: [ProductUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
}

input DeleteOneProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductDeleteFilter!
}

input ProductDeleteFilter {
  and: [ProductDeleteFilter!]
  or: [ProductDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
}

input AddOrdersToCustomerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOrdersOnCustomerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveOrdersFromCustomerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCustomerInput {
  """The record to create"""
  customer: CustomerInput!
}

input CustomerInput {
  name: String!
  lastname: String!
  phone: String!
  direction: String!
  image: String
}

input CreateManyCustomersInput {
  """Array of records to create"""
  customers: [CustomerInput!]!
}

input UpdateOneCustomerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomer!
}

input UpdateCustomer {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  image: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

input UpdateManyCustomersInput {
  """Filter used to find fields to update"""
  filter: CustomerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomer!
}

input CustomerUpdateFilter {
  and: [CustomerUpdateFilter!]
  or: [CustomerUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  image: StringFieldComparison
}

input DeleteOneCustomerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCustomersInput {
  """Filter to find records to delete"""
  filter: CustomerDeleteFilter!
}

input CustomerDeleteFilter {
  and: [CustomerDeleteFilter!]
  or: [CustomerDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  image: StringFieldComparison
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateUser {
  id: ID
  email: String
  password: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateUser {
  id: ID
  email: String
  password: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
}

input CreateOneProviderInput {
  """The record to create"""
  provider: ProviderInput!
}

input ProviderInput {
  contactName: String!
  email: String!
  phone: String!
  direction: String!
  productId: String
}

input CreateManyProvidersInput {
  """Array of records to create"""
  providers: [ProviderInput!]!
}

input UpdateOneProviderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProviderInput!
}

input UpdateManyProvidersInput {
  """Filter used to find fields to update"""
  filter: ProviderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProviderInput!
}

input ProviderUpdateFilter {
  and: [ProviderUpdateFilter!]
  or: [ProviderUpdateFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
}

input DeleteOneProviderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProvidersInput {
  """Filter to find records to delete"""
  filter: ProviderDeleteFilter!
}

input ProviderDeleteFilter {
  and: [ProviderDeleteFilter!]
  or: [ProviderDeleteFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
}

input SetCustomerOnOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddProductsToOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveCustomerFromOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveProductsFromOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneOrderInput {
  """The record to create"""
  order: OrderInput!
}

input OrderInput {
  date: DateTime!
  customerId: String
  quantity: Float
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [OrderInput!]!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrder!
}

input UpdateOrder {
  id: ID
  date: DateTime
  quantity: Float
  customerId: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: OrderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrder!
}

input OrderUpdateFilter {
  and: [OrderUpdateFilter!]
  or: [OrderUpdateFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  quantity: NumberFieldComparison
  customerId: StringFieldComparison
}

input DeleteOneOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: OrderDeleteFilter!
}

input OrderDeleteFilter {
  and: [OrderDeleteFilter!]
  or: [OrderDeleteFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  quantity: NumberFieldComparison
  customerId: StringFieldComparison
}

input LoginInputDTO {
  email: String!
  password: String!
}
