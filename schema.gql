# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  password: String!
  role: [UserRole!]
  customerId: String
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  customer: Customer
}

enum UserRole {
  ADMIN
  USER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Customer {
  id: ID!
  name: String!
  lastname: String!
  phone: String!
  direction: String!
  avatar: String
  userId: String
  createdBy: String!
  createdById: String!
  updatedBy: String!
  updatedById: String!
  deletedBy: String
  deletedById: String
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  user: User!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type CustomerDeleteResponse {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  avatar: String
  userId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type CustomerConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Customer!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CustomerAggregateGroupBy {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  avatar: String
  userId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type CustomerCountAggregate {
  id: Int
  name: Int
  lastname: Int
  phone: Int
  direction: Int
  avatar: Int
  userId: Int
  createdBy: Int
  createdById: Int
  updatedBy: Int
  updatedById: Int
  deletedBy: Int
  deletedById: Int
}

type CustomerMinAggregate {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  avatar: String
  userId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type CustomerMaxAggregate {
  id: ID
  name: String
  lastname: String
  phone: String
  direction: String
  avatar: String
  userId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type CustomerAggregateResponse {
  groupBy: CustomerAggregateGroupBy
  count: CustomerCountAggregate
  min: CustomerMinAggregate
  max: CustomerMaxAggregate
}

type Provider {
  id: ID!
  contactName: String!
  email: String!
  phone: String!
  direction: String!
  createdBy: String!
  createdById: String!
  updatedBy: String!
  updatedById: String!
  deletedBy: String
  deletedById: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  productsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProviderProductsAggregateResponse!]!
  products(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProviderProductsConnection
}

input ProductAggregateFilter {
  and: [ProductAggregateFilter!]
  or: [ProductAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
  providerId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input ProductFilter {
  and: [ProductFilter!]
  or: [ProductFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
  providerId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
  provider: ProductFilterProviderFilter
}

input ProductFilterProviderFilter {
  and: [ProductFilterProviderFilter!]
  or: [ProductFilterProviderFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input ProductSort {
  field: ProductSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductSortFields {
  id
  name
  description
  price
  stock
  image
  providerId
  createdBy
  createdById
  updatedBy
  updatedById
  deletedBy
  deletedById
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Float!
  image: String
  providerId: String
  createdBy: String!
  createdById: String!
  updatedBy: String!
  updatedById: String!
  deletedBy: String
  deletedById: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  provider: Provider
}

type ProductConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductAggregateGroupBy {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type ProductCountAggregate {
  id: Int
  name: Int
  description: Int
  price: Int
  stock: Int
  image: Int
  providerId: Int
  createdBy: Int
  createdById: Int
  updatedBy: Int
  updatedById: Int
  deletedBy: Int
  deletedById: Int
}

type ProductSumAggregate {
  price: Float
  stock: Float
}

type ProductAvgAggregate {
  price: Float
  stock: Float
}

type ProductMinAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type ProductMaxAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type ProductAggregateResponse {
  groupBy: ProductAggregateGroupBy
  count: ProductCountAggregate
  sum: ProductSumAggregate
  avg: ProductAvgAggregate
  min: ProductMinAggregate
  max: ProductMaxAggregate
}

type UserConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [User!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserAggregateGroupBy {
  id: ID
  email: String
  password: String
  customerId: String
}

type UserCountAggregate {
  id: Int
  email: Int
  password: Int
  customerId: Int
}

type UserMinAggregate {
  id: ID
  email: String
  password: String
  customerId: String
}

type UserMaxAggregate {
  id: ID
  email: String
  password: String
  customerId: String
}

type UserAggregateResponse {
  groupBy: UserAggregateGroupBy
  count: UserCountAggregate
  min: UserMinAggregate
  max: UserMaxAggregate
}

type ProviderConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Provider!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProviderAggregateGroupBy {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProviderCountAggregate {
  id: Int
  contactName: Int
  email: Int
  phone: Int
  direction: Int
  createdBy: Int
  createdById: Int
  updatedBy: Int
  updatedById: Int
  deletedBy: Int
  deletedById: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProviderMinAggregate {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProviderMaxAggregate {
  id: ID
  contactName: String
  email: String
  phone: String
  direction: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProviderAggregateResponse {
  groupBy: ProviderAggregateGroupBy
  count: ProviderCountAggregate
  min: ProviderMinAggregate
  max: ProviderMaxAggregate
}

type ProviderProductsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProviderProductsAggregateGroupBy {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type ProviderProductsCountAggregate {
  id: Int
  name: Int
  description: Int
  price: Int
  stock: Int
  image: Int
  providerId: Int
  createdBy: Int
  createdById: Int
  updatedBy: Int
  updatedById: Int
  deletedBy: Int
  deletedById: Int
}

type ProviderProductsSumAggregate {
  price: Float
  stock: Float
}

type ProviderProductsAvgAggregate {
  price: Float
  stock: Float
}

type ProviderProductsMinAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type ProviderProductsMaxAggregate {
  id: ID
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  createdBy: String
  createdById: String
  updatedBy: String
  updatedById: String
  deletedBy: String
  deletedById: String
}

type ProviderProductsAggregateResponse {
  groupBy: ProviderProductsAggregateGroupBy
  count: ProviderProductsCountAggregate
  sum: ProviderProductsSumAggregate
  avg: ProviderProductsAvgAggregate
  min: ProviderProductsMinAggregate
  max: ProviderProductsMaxAggregate
}

type LoginResponse {
  accessToken: String!
}

type Query {
  productAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductAggregateResponse!]!
  product(
    """The id of the record to find."""
    id: ID!
  ): Product
  products(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  customerAggregate(
    """Filter to find records to aggregate on"""
    filter: CustomerAggregateFilter
  ): [CustomerAggregateResponse!]!
  customer(
    """The id of the record to find."""
    id: ID!
  ): Customer
  customers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CustomerFilter = {}

    """Specify to sort results."""
    sorting: [CustomerSort!] = []
  ): CustomerConnection!
  userAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserAggregateResponse!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
  providerAggregate(
    """Filter to find records to aggregate on"""
    filter: ProviderAggregateFilter
  ): [ProviderAggregateResponse!]!
  provider(
    """The id of the record to find."""
    id: ID!
  ): Provider
  providers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProviderFilter = {}

    """Specify to sort results."""
    sorting: [ProviderSort!] = []
  ): ProviderConnection!
}

input CustomerAggregateFilter {
  and: [CustomerAggregateFilter!]
  or: [CustomerAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  avatar: StringFieldComparison
  userId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input CustomerFilter {
  and: [CustomerFilter!]
  or: [CustomerFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  avatar: StringFieldComparison
  userId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
  user: CustomerFilterUserFilter
}

input CustomerFilterUserFilter {
  and: [CustomerFilterUserFilter!]
  or: [CustomerFilterUserFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
  customerId: StringFieldComparison
}

input CustomerSort {
  field: CustomerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CustomerSortFields {
  id
  name
  lastname
  phone
  direction
  avatar
  userId
  createdBy
  createdById
  updatedBy
  updatedById
  deletedBy
  deletedById
}

input UserAggregateFilter {
  and: [UserAggregateFilter!]
  or: [UserAggregateFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
  customerId: StringFieldComparison
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
  customerId: StringFieldComparison
  customer: UserFilterCustomerFilter
}

input UserFilterCustomerFilter {
  and: [UserFilterCustomerFilter!]
  or: [UserFilterCustomerFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  avatar: StringFieldComparison
  userId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  email
  password
  customerId
}

input ProviderAggregateFilter {
  and: [ProviderAggregateFilter!]
  or: [ProviderAggregateFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProviderFilter {
  and: [ProviderFilter!]
  or: [ProviderFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  Products: ProviderFilterProductFilter
}

input ProviderFilterProductFilter {
  and: [ProviderFilterProductFilter!]
  or: [ProviderFilterProductFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
  providerId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input ProviderSort {
  field: ProviderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProviderSortFields {
  id
  contactName
  email
  phone
  direction
  createdBy
  createdById
  updatedBy
  updatedById
  deletedBy
  deletedById
  createdAt
  updatedAt
  deletedAt
}

type Mutation {
  restoreOneProduct(input: ID!): Product!
  restoreManyProduct(input: ProductFilter!): UpdateManyResponse!
  setProviderOnProduct(input: SetProviderOnProductInput!): Product!
  removeProviderFromProduct(input: RemoveProviderFromProductInput!): Product!
  createOneProduct(input: CreateOneProductInput!): Product!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  restoreOneCustomer(input: ID!): Customer!
  restoreManyCustomers(input: CustomerFilter!): UpdateManyResponse!
  setUserOnCustomer(input: SetUserOnCustomerInput!): Customer!
  removeUserFromCustomer(input: RemoveUserFromCustomerInput!): Customer!
  createOneCustomer(input: CreateOneCustomerInput!): Customer!
  createManyCustomers(input: CreateManyCustomersInput!): [Customer!]!
  updateOneCustomer(input: UpdateOneCustomerInput!): Customer!
  updateManyCustomers(input: UpdateManyCustomersInput!): UpdateManyResponse!
  deleteOneCustomer(input: DeleteOneCustomerInput!): CustomerDeleteResponse!
  deleteManyCustomers(input: DeleteManyCustomersInput!): DeleteManyResponse!
  restoreOneProvider(input: ID!): Provider!
  restoreManyProviders(input: ProviderFilter!): UpdateManyResponse!
  restoreOneUser(input: ID!): User!
  restoreManyUsers(input: UserFilter!): UpdateManyResponse!
  setCustomerOnUser(input: SetCustomerOnUserInput!): User!
  removeCustomerFromUser(input: RemoveCustomerFromUserInput!): User!
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  addProductsToProvider(input: AddProductsToProviderInput!): Provider!
  setProductsOnProvider(input: SetProductsOnProviderInput!): Provider!
  removeProductsFromProvider(input: RemoveProductsFromProviderInput!): Provider!
  createOneProvider(input: CreateOneProviderInput!): Provider!
  createManyProviders(input: CreateManyProvidersInput!): [Provider!]!
  updateOneProvider(input: UpdateOneProviderInput!): Provider!
  updateManyProviders(input: UpdateManyProvidersInput!): UpdateManyResponse!
  login(input: LoginInputDTO!): LoginResponse!
}

input SetProviderOnProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveProviderFromProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneProductInput {
  """The record to create"""
  product: ProductInput!
}

input ProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Float!
  image: String
  providerId: String
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [ProductInput!]!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductUpdate!
}

input ProductUpdate {
  name: String
  description: String
  price: Float
  stock: Float
  image: String
  providerId: String
  orderId: String
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductUpdate!
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  or: [ProductUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  price: NumberFieldComparison
  stock: NumberFieldComparison
  image: StringFieldComparison
  providerId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input SetUserOnCustomerInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveUserFromCustomerInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneCustomerInput {
  """The record to create"""
  customer: CustomerInput!
}

input CustomerInput {
  name: String!
  lastname: String!
  phone: String!
  direction: String!
  image: String
}

input CreateManyCustomersInput {
  """Array of records to create"""
  customers: [CustomerInput!]!
}

input UpdateOneCustomerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: CustomerUpdate!
}

input CustomerUpdate {
  name: String
  lastname: String
  phone: String
  direction: String
  image: String
  userId: String
}

input UpdateManyCustomersInput {
  """Filter used to find fields to update"""
  filter: CustomerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: CustomerUpdate!
}

input CustomerUpdateFilter {
  and: [CustomerUpdateFilter!]
  or: [CustomerUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  avatar: StringFieldComparison
  userId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input DeleteOneCustomerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCustomersInput {
  """Filter to find records to delete"""
  filter: CustomerDeleteFilter!
}

input CustomerDeleteFilter {
  and: [CustomerDeleteFilter!]
  or: [CustomerDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  lastname: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  avatar: StringFieldComparison
  userId: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
}

input SetCustomerOnUserInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveCustomerFromUserInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneUserInput {
  """The record to create"""
  user: UserInput!
}

input UserInput {
  email: String!
  password: String!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [UserInput!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserUpdate!
}

input UserUpdate {
  email: String
  password: String
  customerId: String
  role: [UserRole!]
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UserUpdate!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  password: StringFieldComparison
  customerId: StringFieldComparison
}

input AddProductsToProviderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnProviderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveProductsFromProviderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProviderInput {
  """The record to create"""
  provider: ProviderInput!
}

input ProviderInput {
  contactName: String!
  email: String!
  phone: String!
  direction: String!
  productId: String
}

input CreateManyProvidersInput {
  """Array of records to create"""
  providers: [ProviderInput!]!
}

input UpdateOneProviderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProviderUpdate!
}

input ProviderUpdate {
  contactName: String
  email: String
  phone: String
  direction: String
}

input UpdateManyProvidersInput {
  """Filter used to find fields to update"""
  filter: ProviderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProviderUpdate!
}

input ProviderUpdateFilter {
  and: [ProviderUpdateFilter!]
  or: [ProviderUpdateFilter!]
  id: IDFilterComparison
  contactName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  direction: StringFieldComparison
  createdBy: StringFieldComparison
  createdById: StringFieldComparison
  updatedBy: StringFieldComparison
  updatedById: StringFieldComparison
  deletedBy: StringFieldComparison
  deletedById: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input LoginInputDTO {
  email: String!
  password: String!
}
